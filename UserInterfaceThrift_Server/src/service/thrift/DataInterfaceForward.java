/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package service.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataInterfaceForward {

  public interface Iface {

    public Map<String,String> dataBaseConn(Map<String,String> mappara, String ipaddr) throws org.apache.thrift.TException;

    public Map<String,String> dataOper(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> transactionBegin(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> transactionCommit(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> transactionRollBack(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> transactionEnd(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> dataSearchByTxt(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> dataSearchByMemory(Map<String,String> mappara) throws org.apache.thrift.TException;

    public ByteBuffer lobSearch(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> lobInsert(Map<String,String> mappara, ByteBuffer bytes) throws org.apache.thrift.TException;

    public Map<String,String> dataBaseDisconn(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> errInfo(Map<String,String> mappara) throws org.apache.thrift.TException;

    public Map<String,String> subscriptionRequest(Map<String,String> mappara) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void dataBaseConn(Map<String,String> mappara, String ipaddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dataOper(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void transactionBegin(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void transactionCommit(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void transactionRollBack(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void transactionEnd(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dataSearchByTxt(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dataSearchByMemory(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lobSearch(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lobInsert(Map<String,String> mappara, ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dataBaseDisconn(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void errInfo(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void subscriptionRequest(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,String> dataBaseConn(Map<String,String> mappara, String ipaddr) throws org.apache.thrift.TException
    {
      send_dataBaseConn(mappara, ipaddr);
      return recv_dataBaseConn();
    }

    public void send_dataBaseConn(Map<String,String> mappara, String ipaddr) throws org.apache.thrift.TException
    {
      dataBaseConn_args args = new dataBaseConn_args();
      args.setMappara(mappara);
      args.setIpaddr(ipaddr);
      sendBase("dataBaseConn", args);
    }

    public Map<String,String> recv_dataBaseConn() throws org.apache.thrift.TException
    {
      dataBaseConn_result result = new dataBaseConn_result();
      receiveBase(result, "dataBaseConn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dataBaseConn failed: unknown result");
    }

    public Map<String,String> dataOper(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_dataOper(mappara);
      return recv_dataOper();
    }

    public void send_dataOper(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      dataOper_args args = new dataOper_args();
      args.setMappara(mappara);
      sendBase("dataOper", args);
    }

    public Map<String,String> recv_dataOper() throws org.apache.thrift.TException
    {
      dataOper_result result = new dataOper_result();
      receiveBase(result, "dataOper");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dataOper failed: unknown result");
    }

    public Map<String,String> transactionBegin(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_transactionBegin(mappara);
      return recv_transactionBegin();
    }

    public void send_transactionBegin(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      transactionBegin_args args = new transactionBegin_args();
      args.setMappara(mappara);
      sendBase("transactionBegin", args);
    }

    public Map<String,String> recv_transactionBegin() throws org.apache.thrift.TException
    {
      transactionBegin_result result = new transactionBegin_result();
      receiveBase(result, "transactionBegin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transactionBegin failed: unknown result");
    }

    public Map<String,String> transactionCommit(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_transactionCommit(mappara);
      return recv_transactionCommit();
    }

    public void send_transactionCommit(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      transactionCommit_args args = new transactionCommit_args();
      args.setMappara(mappara);
      sendBase("transactionCommit", args);
    }

    public Map<String,String> recv_transactionCommit() throws org.apache.thrift.TException
    {
      transactionCommit_result result = new transactionCommit_result();
      receiveBase(result, "transactionCommit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transactionCommit failed: unknown result");
    }

    public Map<String,String> transactionRollBack(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_transactionRollBack(mappara);
      return recv_transactionRollBack();
    }

    public void send_transactionRollBack(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      transactionRollBack_args args = new transactionRollBack_args();
      args.setMappara(mappara);
      sendBase("transactionRollBack", args);
    }

    public Map<String,String> recv_transactionRollBack() throws org.apache.thrift.TException
    {
      transactionRollBack_result result = new transactionRollBack_result();
      receiveBase(result, "transactionRollBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transactionRollBack failed: unknown result");
    }

    public Map<String,String> transactionEnd(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_transactionEnd(mappara);
      return recv_transactionEnd();
    }

    public void send_transactionEnd(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      transactionEnd_args args = new transactionEnd_args();
      args.setMappara(mappara);
      sendBase("transactionEnd", args);
    }

    public Map<String,String> recv_transactionEnd() throws org.apache.thrift.TException
    {
      transactionEnd_result result = new transactionEnd_result();
      receiveBase(result, "transactionEnd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "transactionEnd failed: unknown result");
    }

    public Map<String,String> dataSearchByTxt(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_dataSearchByTxt(mappara);
      return recv_dataSearchByTxt();
    }

    public void send_dataSearchByTxt(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      dataSearchByTxt_args args = new dataSearchByTxt_args();
      args.setMappara(mappara);
      sendBase("dataSearchByTxt", args);
    }

    public Map<String,String> recv_dataSearchByTxt() throws org.apache.thrift.TException
    {
      dataSearchByTxt_result result = new dataSearchByTxt_result();
      receiveBase(result, "dataSearchByTxt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dataSearchByTxt failed: unknown result");
    }

    public Map<String,String> dataSearchByMemory(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_dataSearchByMemory(mappara);
      return recv_dataSearchByMemory();
    }

    public void send_dataSearchByMemory(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      dataSearchByMemory_args args = new dataSearchByMemory_args();
      args.setMappara(mappara);
      sendBase("dataSearchByMemory", args);
    }

    public Map<String,String> recv_dataSearchByMemory() throws org.apache.thrift.TException
    {
      dataSearchByMemory_result result = new dataSearchByMemory_result();
      receiveBase(result, "dataSearchByMemory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dataSearchByMemory failed: unknown result");
    }

    public ByteBuffer lobSearch(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_lobSearch(mappara);
      return recv_lobSearch();
    }

    public void send_lobSearch(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      lobSearch_args args = new lobSearch_args();
      args.setMappara(mappara);
      sendBase("lobSearch", args);
    }

    public ByteBuffer recv_lobSearch() throws org.apache.thrift.TException
    {
      lobSearch_result result = new lobSearch_result();
      receiveBase(result, "lobSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lobSearch failed: unknown result");
    }

    public Map<String,String> lobInsert(Map<String,String> mappara, ByteBuffer bytes) throws org.apache.thrift.TException
    {
      send_lobInsert(mappara, bytes);
      return recv_lobInsert();
    }

    public void send_lobInsert(Map<String,String> mappara, ByteBuffer bytes) throws org.apache.thrift.TException
    {
      lobInsert_args args = new lobInsert_args();
      args.setMappara(mappara);
      args.setBytes(bytes);
      sendBase("lobInsert", args);
    }

    public Map<String,String> recv_lobInsert() throws org.apache.thrift.TException
    {
      lobInsert_result result = new lobInsert_result();
      receiveBase(result, "lobInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lobInsert failed: unknown result");
    }

    public Map<String,String> dataBaseDisconn(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_dataBaseDisconn(mappara);
      return recv_dataBaseDisconn();
    }

    public void send_dataBaseDisconn(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      dataBaseDisconn_args args = new dataBaseDisconn_args();
      args.setMappara(mappara);
      sendBase("dataBaseDisconn", args);
    }

    public Map<String,String> recv_dataBaseDisconn() throws org.apache.thrift.TException
    {
      dataBaseDisconn_result result = new dataBaseDisconn_result();
      receiveBase(result, "dataBaseDisconn");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dataBaseDisconn failed: unknown result");
    }

    public Map<String,String> errInfo(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_errInfo(mappara);
      return recv_errInfo();
    }

    public void send_errInfo(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      errInfo_args args = new errInfo_args();
      args.setMappara(mappara);
      sendBase("errInfo", args);
    }

    public Map<String,String> recv_errInfo() throws org.apache.thrift.TException
    {
      errInfo_result result = new errInfo_result();
      receiveBase(result, "errInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "errInfo failed: unknown result");
    }

    public Map<String,String> subscriptionRequest(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      send_subscriptionRequest(mappara);
      return recv_subscriptionRequest();
    }

    public void send_subscriptionRequest(Map<String,String> mappara) throws org.apache.thrift.TException
    {
      subscriptionRequest_args args = new subscriptionRequest_args();
      args.setMappara(mappara);
      sendBase("subscriptionRequest", args);
    }

    public Map<String,String> recv_subscriptionRequest() throws org.apache.thrift.TException
    {
      subscriptionRequest_result result = new subscriptionRequest_result();
      receiveBase(result, "subscriptionRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "subscriptionRequest failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dataBaseConn(Map<String,String> mappara, String ipaddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dataBaseConn_call method_call = new dataBaseConn_call(mappara, ipaddr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dataBaseConn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      private String ipaddr;
      public dataBaseConn_call(Map<String,String> mappara, String ipaddr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
        this.ipaddr = ipaddr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dataBaseConn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dataBaseConn_args args = new dataBaseConn_args();
        args.setMappara(mappara);
        args.setIpaddr(ipaddr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dataBaseConn();
      }
    }

    public void dataOper(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dataOper_call method_call = new dataOper_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dataOper_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public dataOper_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dataOper", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dataOper_args args = new dataOper_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dataOper();
      }
    }

    public void transactionBegin(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transactionBegin_call method_call = new transactionBegin_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transactionBegin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public transactionBegin_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transactionBegin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transactionBegin_args args = new transactionBegin_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transactionBegin();
      }
    }

    public void transactionCommit(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transactionCommit_call method_call = new transactionCommit_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transactionCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public transactionCommit_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transactionCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transactionCommit_args args = new transactionCommit_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transactionCommit();
      }
    }

    public void transactionRollBack(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transactionRollBack_call method_call = new transactionRollBack_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transactionRollBack_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public transactionRollBack_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transactionRollBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transactionRollBack_args args = new transactionRollBack_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transactionRollBack();
      }
    }

    public void transactionEnd(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      transactionEnd_call method_call = new transactionEnd_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class transactionEnd_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public transactionEnd_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("transactionEnd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        transactionEnd_args args = new transactionEnd_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_transactionEnd();
      }
    }

    public void dataSearchByTxt(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dataSearchByTxt_call method_call = new dataSearchByTxt_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dataSearchByTxt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public dataSearchByTxt_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dataSearchByTxt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dataSearchByTxt_args args = new dataSearchByTxt_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dataSearchByTxt();
      }
    }

    public void dataSearchByMemory(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dataSearchByMemory_call method_call = new dataSearchByMemory_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dataSearchByMemory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public dataSearchByMemory_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dataSearchByMemory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dataSearchByMemory_args args = new dataSearchByMemory_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dataSearchByMemory();
      }
    }

    public void lobSearch(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lobSearch_call method_call = new lobSearch_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lobSearch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public lobSearch_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lobSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lobSearch_args args = new lobSearch_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lobSearch();
      }
    }

    public void lobInsert(Map<String,String> mappara, ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lobInsert_call method_call = new lobInsert_call(mappara, bytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lobInsert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      private ByteBuffer bytes;
      public lobInsert_call(Map<String,String> mappara, ByteBuffer bytes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
        this.bytes = bytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lobInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lobInsert_args args = new lobInsert_args();
        args.setMappara(mappara);
        args.setBytes(bytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lobInsert();
      }
    }

    public void dataBaseDisconn(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dataBaseDisconn_call method_call = new dataBaseDisconn_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dataBaseDisconn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public dataBaseDisconn_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dataBaseDisconn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dataBaseDisconn_args args = new dataBaseDisconn_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dataBaseDisconn();
      }
    }

    public void errInfo(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      errInfo_call method_call = new errInfo_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class errInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public errInfo_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("errInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        errInfo_args args = new errInfo_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_errInfo();
      }
    }

    public void subscriptionRequest(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      subscriptionRequest_call method_call = new subscriptionRequest_call(mappara, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class subscriptionRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Map<String,String> mappara;
      public subscriptionRequest_call(Map<String,String> mappara, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mappara = mappara;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("subscriptionRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        subscriptionRequest_args args = new subscriptionRequest_args();
        args.setMappara(mappara);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_subscriptionRequest();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dataBaseConn", new dataBaseConn());
      processMap.put("dataOper", new dataOper());
      processMap.put("transactionBegin", new transactionBegin());
      processMap.put("transactionCommit", new transactionCommit());
      processMap.put("transactionRollBack", new transactionRollBack());
      processMap.put("transactionEnd", new transactionEnd());
      processMap.put("dataSearchByTxt", new dataSearchByTxt());
      processMap.put("dataSearchByMemory", new dataSearchByMemory());
      processMap.put("lobSearch", new lobSearch());
      processMap.put("lobInsert", new lobInsert());
      processMap.put("dataBaseDisconn", new dataBaseDisconn());
      processMap.put("errInfo", new errInfo());
      processMap.put("subscriptionRequest", new subscriptionRequest());
      return processMap;
    }

    public static class dataBaseConn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dataBaseConn_args> {
      public dataBaseConn() {
        super("dataBaseConn");
      }

      public dataBaseConn_args getEmptyArgsInstance() {
        return new dataBaseConn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dataBaseConn_result getResult(I iface, dataBaseConn_args args) throws org.apache.thrift.TException {
        dataBaseConn_result result = new dataBaseConn_result();
        result.success = iface.dataBaseConn(args.mappara, args.ipaddr);
        return result;
      }
    }

    public static class dataOper<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dataOper_args> {
      public dataOper() {
        super("dataOper");
      }

      public dataOper_args getEmptyArgsInstance() {
        return new dataOper_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dataOper_result getResult(I iface, dataOper_args args) throws org.apache.thrift.TException {
        dataOper_result result = new dataOper_result();
        result.success = iface.dataOper(args.mappara);
        return result;
      }
    }

    public static class transactionBegin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transactionBegin_args> {
      public transactionBegin() {
        super("transactionBegin");
      }

      public transactionBegin_args getEmptyArgsInstance() {
        return new transactionBegin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transactionBegin_result getResult(I iface, transactionBegin_args args) throws org.apache.thrift.TException {
        transactionBegin_result result = new transactionBegin_result();
        result.success = iface.transactionBegin(args.mappara);
        return result;
      }
    }

    public static class transactionCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transactionCommit_args> {
      public transactionCommit() {
        super("transactionCommit");
      }

      public transactionCommit_args getEmptyArgsInstance() {
        return new transactionCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transactionCommit_result getResult(I iface, transactionCommit_args args) throws org.apache.thrift.TException {
        transactionCommit_result result = new transactionCommit_result();
        result.success = iface.transactionCommit(args.mappara);
        return result;
      }
    }

    public static class transactionRollBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transactionRollBack_args> {
      public transactionRollBack() {
        super("transactionRollBack");
      }

      public transactionRollBack_args getEmptyArgsInstance() {
        return new transactionRollBack_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transactionRollBack_result getResult(I iface, transactionRollBack_args args) throws org.apache.thrift.TException {
        transactionRollBack_result result = new transactionRollBack_result();
        result.success = iface.transactionRollBack(args.mappara);
        return result;
      }
    }

    public static class transactionEnd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, transactionEnd_args> {
      public transactionEnd() {
        super("transactionEnd");
      }

      public transactionEnd_args getEmptyArgsInstance() {
        return new transactionEnd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public transactionEnd_result getResult(I iface, transactionEnd_args args) throws org.apache.thrift.TException {
        transactionEnd_result result = new transactionEnd_result();
        result.success = iface.transactionEnd(args.mappara);
        return result;
      }
    }

    public static class dataSearchByTxt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dataSearchByTxt_args> {
      public dataSearchByTxt() {
        super("dataSearchByTxt");
      }

      public dataSearchByTxt_args getEmptyArgsInstance() {
        return new dataSearchByTxt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dataSearchByTxt_result getResult(I iface, dataSearchByTxt_args args) throws org.apache.thrift.TException {
        dataSearchByTxt_result result = new dataSearchByTxt_result();
        result.success = iface.dataSearchByTxt(args.mappara);
        return result;
      }
    }

    public static class dataSearchByMemory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dataSearchByMemory_args> {
      public dataSearchByMemory() {
        super("dataSearchByMemory");
      }

      public dataSearchByMemory_args getEmptyArgsInstance() {
        return new dataSearchByMemory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dataSearchByMemory_result getResult(I iface, dataSearchByMemory_args args) throws org.apache.thrift.TException {
        dataSearchByMemory_result result = new dataSearchByMemory_result();
        result.success = iface.dataSearchByMemory(args.mappara);
        return result;
      }
    }

    public static class lobSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lobSearch_args> {
      public lobSearch() {
        super("lobSearch");
      }

      public lobSearch_args getEmptyArgsInstance() {
        return new lobSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lobSearch_result getResult(I iface, lobSearch_args args) throws org.apache.thrift.TException {
        lobSearch_result result = new lobSearch_result();
        result.success = iface.lobSearch(args.mappara);
        return result;
      }
    }

    public static class lobInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lobInsert_args> {
      public lobInsert() {
        super("lobInsert");
      }

      public lobInsert_args getEmptyArgsInstance() {
        return new lobInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lobInsert_result getResult(I iface, lobInsert_args args) throws org.apache.thrift.TException {
        lobInsert_result result = new lobInsert_result();
        result.success = iface.lobInsert(args.mappara, args.bytes);
        return result;
      }
    }

    public static class dataBaseDisconn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dataBaseDisconn_args> {
      public dataBaseDisconn() {
        super("dataBaseDisconn");
      }

      public dataBaseDisconn_args getEmptyArgsInstance() {
        return new dataBaseDisconn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dataBaseDisconn_result getResult(I iface, dataBaseDisconn_args args) throws org.apache.thrift.TException {
        dataBaseDisconn_result result = new dataBaseDisconn_result();
        result.success = iface.dataBaseDisconn(args.mappara);
        return result;
      }
    }

    public static class errInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, errInfo_args> {
      public errInfo() {
        super("errInfo");
      }

      public errInfo_args getEmptyArgsInstance() {
        return new errInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public errInfo_result getResult(I iface, errInfo_args args) throws org.apache.thrift.TException {
        errInfo_result result = new errInfo_result();
        result.success = iface.errInfo(args.mappara);
        return result;
      }
    }

    public static class subscriptionRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, subscriptionRequest_args> {
      public subscriptionRequest() {
        super("subscriptionRequest");
      }

      public subscriptionRequest_args getEmptyArgsInstance() {
        return new subscriptionRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public subscriptionRequest_result getResult(I iface, subscriptionRequest_args args) throws org.apache.thrift.TException {
        subscriptionRequest_result result = new subscriptionRequest_result();
        result.success = iface.subscriptionRequest(args.mappara);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dataBaseConn", new dataBaseConn());
      processMap.put("dataOper", new dataOper());
      processMap.put("transactionBegin", new transactionBegin());
      processMap.put("transactionCommit", new transactionCommit());
      processMap.put("transactionRollBack", new transactionRollBack());
      processMap.put("transactionEnd", new transactionEnd());
      processMap.put("dataSearchByTxt", new dataSearchByTxt());
      processMap.put("dataSearchByMemory", new dataSearchByMemory());
      processMap.put("lobSearch", new lobSearch());
      processMap.put("lobInsert", new lobInsert());
      processMap.put("dataBaseDisconn", new dataBaseDisconn());
      processMap.put("errInfo", new errInfo());
      processMap.put("subscriptionRequest", new subscriptionRequest());
      return processMap;
    }

    public static class dataBaseConn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dataBaseConn_args, Map<String,String>> {
      public dataBaseConn() {
        super("dataBaseConn");
      }

      public dataBaseConn_args getEmptyArgsInstance() {
        return new dataBaseConn_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            dataBaseConn_result result = new dataBaseConn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dataBaseConn_result result = new dataBaseConn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dataBaseConn_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.dataBaseConn(args.mappara, args.ipaddr,resultHandler);
      }
    }

    public static class dataOper<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dataOper_args, Map<String,String>> {
      public dataOper() {
        super("dataOper");
      }

      public dataOper_args getEmptyArgsInstance() {
        return new dataOper_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            dataOper_result result = new dataOper_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dataOper_result result = new dataOper_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dataOper_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.dataOper(args.mappara,resultHandler);
      }
    }

    public static class transactionBegin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transactionBegin_args, Map<String,String>> {
      public transactionBegin() {
        super("transactionBegin");
      }

      public transactionBegin_args getEmptyArgsInstance() {
        return new transactionBegin_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            transactionBegin_result result = new transactionBegin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transactionBegin_result result = new transactionBegin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transactionBegin_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.transactionBegin(args.mappara,resultHandler);
      }
    }

    public static class transactionCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transactionCommit_args, Map<String,String>> {
      public transactionCommit() {
        super("transactionCommit");
      }

      public transactionCommit_args getEmptyArgsInstance() {
        return new transactionCommit_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            transactionCommit_result result = new transactionCommit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transactionCommit_result result = new transactionCommit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transactionCommit_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.transactionCommit(args.mappara,resultHandler);
      }
    }

    public static class transactionRollBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transactionRollBack_args, Map<String,String>> {
      public transactionRollBack() {
        super("transactionRollBack");
      }

      public transactionRollBack_args getEmptyArgsInstance() {
        return new transactionRollBack_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            transactionRollBack_result result = new transactionRollBack_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transactionRollBack_result result = new transactionRollBack_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transactionRollBack_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.transactionRollBack(args.mappara,resultHandler);
      }
    }

    public static class transactionEnd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, transactionEnd_args, Map<String,String>> {
      public transactionEnd() {
        super("transactionEnd");
      }

      public transactionEnd_args getEmptyArgsInstance() {
        return new transactionEnd_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            transactionEnd_result result = new transactionEnd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            transactionEnd_result result = new transactionEnd_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, transactionEnd_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.transactionEnd(args.mappara,resultHandler);
      }
    }

    public static class dataSearchByTxt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dataSearchByTxt_args, Map<String,String>> {
      public dataSearchByTxt() {
        super("dataSearchByTxt");
      }

      public dataSearchByTxt_args getEmptyArgsInstance() {
        return new dataSearchByTxt_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            dataSearchByTxt_result result = new dataSearchByTxt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dataSearchByTxt_result result = new dataSearchByTxt_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dataSearchByTxt_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.dataSearchByTxt(args.mappara,resultHandler);
      }
    }

    public static class dataSearchByMemory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dataSearchByMemory_args, Map<String,String>> {
      public dataSearchByMemory() {
        super("dataSearchByMemory");
      }

      public dataSearchByMemory_args getEmptyArgsInstance() {
        return new dataSearchByMemory_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            dataSearchByMemory_result result = new dataSearchByMemory_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dataSearchByMemory_result result = new dataSearchByMemory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dataSearchByMemory_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.dataSearchByMemory(args.mappara,resultHandler);
      }
    }

    public static class lobSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lobSearch_args, ByteBuffer> {
      public lobSearch() {
        super("lobSearch");
      }

      public lobSearch_args getEmptyArgsInstance() {
        return new lobSearch_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            lobSearch_result result = new lobSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lobSearch_result result = new lobSearch_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lobSearch_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.lobSearch(args.mappara,resultHandler);
      }
    }

    public static class lobInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lobInsert_args, Map<String,String>> {
      public lobInsert() {
        super("lobInsert");
      }

      public lobInsert_args getEmptyArgsInstance() {
        return new lobInsert_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            lobInsert_result result = new lobInsert_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lobInsert_result result = new lobInsert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lobInsert_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.lobInsert(args.mappara, args.bytes,resultHandler);
      }
    }

    public static class dataBaseDisconn<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dataBaseDisconn_args, Map<String,String>> {
      public dataBaseDisconn() {
        super("dataBaseDisconn");
      }

      public dataBaseDisconn_args getEmptyArgsInstance() {
        return new dataBaseDisconn_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            dataBaseDisconn_result result = new dataBaseDisconn_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dataBaseDisconn_result result = new dataBaseDisconn_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dataBaseDisconn_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.dataBaseDisconn(args.mappara,resultHandler);
      }
    }

    public static class errInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, errInfo_args, Map<String,String>> {
      public errInfo() {
        super("errInfo");
      }

      public errInfo_args getEmptyArgsInstance() {
        return new errInfo_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            errInfo_result result = new errInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            errInfo_result result = new errInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, errInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.errInfo(args.mappara,resultHandler);
      }
    }

    public static class subscriptionRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, subscriptionRequest_args, Map<String,String>> {
      public subscriptionRequest() {
        super("subscriptionRequest");
      }

      public subscriptionRequest_args getEmptyArgsInstance() {
        return new subscriptionRequest_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            subscriptionRequest_result result = new subscriptionRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            subscriptionRequest_result result = new subscriptionRequest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, subscriptionRequest_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.subscriptionRequest(args.mappara,resultHandler);
      }
    }

  }

  public static class dataBaseConn_args implements org.apache.thrift.TBase<dataBaseConn_args, dataBaseConn_args._Fields>, java.io.Serializable, Cloneable, Comparable<dataBaseConn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataBaseConn_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField IPADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("ipaddr", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataBaseConn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataBaseConn_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required
    public String ipaddr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara"),
      IPADDR((short)2, "ipaddr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          case 2: // IPADDR
            return IPADDR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.IPADDR, new org.apache.thrift.meta_data.FieldMetaData("ipaddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataBaseConn_args.class, metaDataMap);
    }

    public dataBaseConn_args() {
    }

    public dataBaseConn_args(
      Map<String,String> mappara,
      String ipaddr)
    {
      this();
      this.mappara = mappara;
      this.ipaddr = ipaddr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataBaseConn_args(dataBaseConn_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
      if (other.isSetIpaddr()) {
        this.ipaddr = other.ipaddr;
      }
    }

    public dataBaseConn_args deepCopy() {
      return new dataBaseConn_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
      this.ipaddr = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public dataBaseConn_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public String getIpaddr() {
      return this.ipaddr;
    }

    public dataBaseConn_args setIpaddr(String ipaddr) {
      this.ipaddr = ipaddr;
      return this;
    }

    public void unsetIpaddr() {
      this.ipaddr = null;
    }

    /** Returns true if field ipaddr is set (has been assigned a value) and false otherwise */
    public boolean isSetIpaddr() {
      return this.ipaddr != null;
    }

    public void setIpaddrIsSet(boolean value) {
      if (!value) {
        this.ipaddr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      case IPADDR:
        if (value == null) {
          unsetIpaddr();
        } else {
          setIpaddr((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      case IPADDR:
        return getIpaddr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      case IPADDR:
        return isSetIpaddr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataBaseConn_args)
        return this.equals((dataBaseConn_args)that);
      return false;
    }

    public boolean equals(dataBaseConn_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      boolean this_present_ipaddr = true && this.isSetIpaddr();
      boolean that_present_ipaddr = true && that.isSetIpaddr();
      if (this_present_ipaddr || that_present_ipaddr) {
        if (!(this_present_ipaddr && that_present_ipaddr))
          return false;
        if (!this.ipaddr.equals(that.ipaddr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataBaseConn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIpaddr()).compareTo(other.isSetIpaddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpaddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipaddr, other.ipaddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataBaseConn_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipaddr:");
      if (this.ipaddr == null) {
        sb.append("null");
      } else {
        sb.append(this.ipaddr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataBaseConn_argsStandardSchemeFactory implements SchemeFactory {
      public dataBaseConn_argsStandardScheme getScheme() {
        return new dataBaseConn_argsStandardScheme();
      }
    }

    private static class dataBaseConn_argsStandardScheme extends StandardScheme<dataBaseConn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataBaseConn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    String _key2;
                    String _val3;
                    _key2 = iprot.readString();
                    _val3 = iprot.readString();
                    struct.mappara.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IPADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ipaddr = iprot.readString();
                struct.setIpaddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataBaseConn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter4 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ipaddr != null) {
          oprot.writeFieldBegin(IPADDR_FIELD_DESC);
          oprot.writeString(struct.ipaddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataBaseConn_argsTupleSchemeFactory implements SchemeFactory {
      public dataBaseConn_argsTupleScheme getScheme() {
        return new dataBaseConn_argsTupleScheme();
      }
    }

    private static class dataBaseConn_argsTupleScheme extends TupleScheme<dataBaseConn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataBaseConn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        if (struct.isSetIpaddr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter5 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
        if (struct.isSetIpaddr()) {
          oprot.writeString(struct.ipaddr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataBaseConn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map6.size);
            for (int _i7 = 0; _i7 < _map6.size; ++_i7)
            {
              String _key8;
              String _val9;
              _key8 = iprot.readString();
              _val9 = iprot.readString();
              struct.mappara.put(_key8, _val9);
            }
          }
          struct.setMapparaIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ipaddr = iprot.readString();
          struct.setIpaddrIsSet(true);
        }
      }
    }

  }

  public static class dataBaseConn_result implements org.apache.thrift.TBase<dataBaseConn_result, dataBaseConn_result._Fields>, java.io.Serializable, Cloneable, Comparable<dataBaseConn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataBaseConn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataBaseConn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataBaseConn_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataBaseConn_result.class, metaDataMap);
    }

    public dataBaseConn_result() {
    }

    public dataBaseConn_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataBaseConn_result(dataBaseConn_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public dataBaseConn_result deepCopy() {
      return new dataBaseConn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public dataBaseConn_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataBaseConn_result)
        return this.equals((dataBaseConn_result)that);
      return false;
    }

    public boolean equals(dataBaseConn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataBaseConn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataBaseConn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataBaseConn_resultStandardSchemeFactory implements SchemeFactory {
      public dataBaseConn_resultStandardScheme getScheme() {
        return new dataBaseConn_resultStandardScheme();
      }
    }

    private static class dataBaseConn_resultStandardScheme extends StandardScheme<dataBaseConn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataBaseConn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map10.size);
                  for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                  {
                    String _key12;
                    String _val13;
                    _key12 = iprot.readString();
                    _val13 = iprot.readString();
                    struct.success.put(_key12, _val13);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataBaseConn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter14 : struct.success.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataBaseConn_resultTupleSchemeFactory implements SchemeFactory {
      public dataBaseConn_resultTupleScheme getScheme() {
        return new dataBaseConn_resultTupleScheme();
      }
    }

    private static class dataBaseConn_resultTupleScheme extends TupleScheme<dataBaseConn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataBaseConn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter15 : struct.success.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataBaseConn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map16.size);
            for (int _i17 = 0; _i17 < _map16.size; ++_i17)
            {
              String _key18;
              String _val19;
              _key18 = iprot.readString();
              _val19 = iprot.readString();
              struct.success.put(_key18, _val19);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dataOper_args implements org.apache.thrift.TBase<dataOper_args, dataOper_args._Fields>, java.io.Serializable, Cloneable, Comparable<dataOper_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataOper_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataOper_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataOper_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataOper_args.class, metaDataMap);
    }

    public dataOper_args() {
    }

    public dataOper_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataOper_args(dataOper_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public dataOper_args deepCopy() {
      return new dataOper_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public dataOper_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataOper_args)
        return this.equals((dataOper_args)that);
      return false;
    }

    public boolean equals(dataOper_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataOper_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataOper_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataOper_argsStandardSchemeFactory implements SchemeFactory {
      public dataOper_argsStandardScheme getScheme() {
        return new dataOper_argsStandardScheme();
      }
    }

    private static class dataOper_argsStandardScheme extends StandardScheme<dataOper_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataOper_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map20.size);
                  for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                  {
                    String _key22;
                    String _val23;
                    _key22 = iprot.readString();
                    _val23 = iprot.readString();
                    struct.mappara.put(_key22, _val23);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataOper_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter24 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataOper_argsTupleSchemeFactory implements SchemeFactory {
      public dataOper_argsTupleScheme getScheme() {
        return new dataOper_argsTupleScheme();
      }
    }

    private static class dataOper_argsTupleScheme extends TupleScheme<dataOper_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataOper_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter25 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataOper_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map26.size);
            for (int _i27 = 0; _i27 < _map26.size; ++_i27)
            {
              String _key28;
              String _val29;
              _key28 = iprot.readString();
              _val29 = iprot.readString();
              struct.mappara.put(_key28, _val29);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class dataOper_result implements org.apache.thrift.TBase<dataOper_result, dataOper_result._Fields>, java.io.Serializable, Cloneable, Comparable<dataOper_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataOper_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataOper_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataOper_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataOper_result.class, metaDataMap);
    }

    public dataOper_result() {
    }

    public dataOper_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataOper_result(dataOper_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public dataOper_result deepCopy() {
      return new dataOper_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public dataOper_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataOper_result)
        return this.equals((dataOper_result)that);
      return false;
    }

    public boolean equals(dataOper_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataOper_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataOper_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataOper_resultStandardSchemeFactory implements SchemeFactory {
      public dataOper_resultStandardScheme getScheme() {
        return new dataOper_resultStandardScheme();
      }
    }

    private static class dataOper_resultStandardScheme extends StandardScheme<dataOper_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataOper_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map30.size);
                  for (int _i31 = 0; _i31 < _map30.size; ++_i31)
                  {
                    String _key32;
                    String _val33;
                    _key32 = iprot.readString();
                    _val33 = iprot.readString();
                    struct.success.put(_key32, _val33);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataOper_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter34 : struct.success.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataOper_resultTupleSchemeFactory implements SchemeFactory {
      public dataOper_resultTupleScheme getScheme() {
        return new dataOper_resultTupleScheme();
      }
    }

    private static class dataOper_resultTupleScheme extends TupleScheme<dataOper_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataOper_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter35 : struct.success.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataOper_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map36.size);
            for (int _i37 = 0; _i37 < _map36.size; ++_i37)
            {
              String _key38;
              String _val39;
              _key38 = iprot.readString();
              _val39 = iprot.readString();
              struct.success.put(_key38, _val39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class transactionBegin_args implements org.apache.thrift.TBase<transactionBegin_args, transactionBegin_args._Fields>, java.io.Serializable, Cloneable, Comparable<transactionBegin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionBegin_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionBegin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionBegin_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionBegin_args.class, metaDataMap);
    }

    public transactionBegin_args() {
    }

    public transactionBegin_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionBegin_args(transactionBegin_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public transactionBegin_args deepCopy() {
      return new transactionBegin_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public transactionBegin_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionBegin_args)
        return this.equals((transactionBegin_args)that);
      return false;
    }

    public boolean equals(transactionBegin_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionBegin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionBegin_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionBegin_argsStandardSchemeFactory implements SchemeFactory {
      public transactionBegin_argsStandardScheme getScheme() {
        return new transactionBegin_argsStandardScheme();
      }
    }

    private static class transactionBegin_argsStandardScheme extends StandardScheme<transactionBegin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionBegin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map40.size);
                  for (int _i41 = 0; _i41 < _map40.size; ++_i41)
                  {
                    String _key42;
                    String _val43;
                    _key42 = iprot.readString();
                    _val43 = iprot.readString();
                    struct.mappara.put(_key42, _val43);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionBegin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter44 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionBegin_argsTupleSchemeFactory implements SchemeFactory {
      public transactionBegin_argsTupleScheme getScheme() {
        return new transactionBegin_argsTupleScheme();
      }
    }

    private static class transactionBegin_argsTupleScheme extends TupleScheme<transactionBegin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionBegin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter45 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionBegin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map46.size);
            for (int _i47 = 0; _i47 < _map46.size; ++_i47)
            {
              String _key48;
              String _val49;
              _key48 = iprot.readString();
              _val49 = iprot.readString();
              struct.mappara.put(_key48, _val49);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class transactionBegin_result implements org.apache.thrift.TBase<transactionBegin_result, transactionBegin_result._Fields>, java.io.Serializable, Cloneable, Comparable<transactionBegin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionBegin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionBegin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionBegin_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionBegin_result.class, metaDataMap);
    }

    public transactionBegin_result() {
    }

    public transactionBegin_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionBegin_result(transactionBegin_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public transactionBegin_result deepCopy() {
      return new transactionBegin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public transactionBegin_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionBegin_result)
        return this.equals((transactionBegin_result)that);
      return false;
    }

    public boolean equals(transactionBegin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionBegin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionBegin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionBegin_resultStandardSchemeFactory implements SchemeFactory {
      public transactionBegin_resultStandardScheme getScheme() {
        return new transactionBegin_resultStandardScheme();
      }
    }

    private static class transactionBegin_resultStandardScheme extends StandardScheme<transactionBegin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionBegin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map50.size);
                  for (int _i51 = 0; _i51 < _map50.size; ++_i51)
                  {
                    String _key52;
                    String _val53;
                    _key52 = iprot.readString();
                    _val53 = iprot.readString();
                    struct.success.put(_key52, _val53);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionBegin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter54 : struct.success.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionBegin_resultTupleSchemeFactory implements SchemeFactory {
      public transactionBegin_resultTupleScheme getScheme() {
        return new transactionBegin_resultTupleScheme();
      }
    }

    private static class transactionBegin_resultTupleScheme extends TupleScheme<transactionBegin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionBegin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter55 : struct.success.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionBegin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map56.size);
            for (int _i57 = 0; _i57 < _map56.size; ++_i57)
            {
              String _key58;
              String _val59;
              _key58 = iprot.readString();
              _val59 = iprot.readString();
              struct.success.put(_key58, _val59);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class transactionCommit_args implements org.apache.thrift.TBase<transactionCommit_args, transactionCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<transactionCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionCommit_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionCommit_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionCommit_args.class, metaDataMap);
    }

    public transactionCommit_args() {
    }

    public transactionCommit_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionCommit_args(transactionCommit_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public transactionCommit_args deepCopy() {
      return new transactionCommit_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public transactionCommit_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionCommit_args)
        return this.equals((transactionCommit_args)that);
      return false;
    }

    public boolean equals(transactionCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionCommit_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionCommit_argsStandardSchemeFactory implements SchemeFactory {
      public transactionCommit_argsStandardScheme getScheme() {
        return new transactionCommit_argsStandardScheme();
      }
    }

    private static class transactionCommit_argsStandardScheme extends StandardScheme<transactionCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map60.size);
                  for (int _i61 = 0; _i61 < _map60.size; ++_i61)
                  {
                    String _key62;
                    String _val63;
                    _key62 = iprot.readString();
                    _val63 = iprot.readString();
                    struct.mappara.put(_key62, _val63);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter64 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              oprot.writeString(_iter64.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionCommit_argsTupleSchemeFactory implements SchemeFactory {
      public transactionCommit_argsTupleScheme getScheme() {
        return new transactionCommit_argsTupleScheme();
      }
    }

    private static class transactionCommit_argsTupleScheme extends TupleScheme<transactionCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter65 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter65.getKey());
              oprot.writeString(_iter65.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map66.size);
            for (int _i67 = 0; _i67 < _map66.size; ++_i67)
            {
              String _key68;
              String _val69;
              _key68 = iprot.readString();
              _val69 = iprot.readString();
              struct.mappara.put(_key68, _val69);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class transactionCommit_result implements org.apache.thrift.TBase<transactionCommit_result, transactionCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<transactionCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionCommit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionCommit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionCommit_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionCommit_result.class, metaDataMap);
    }

    public transactionCommit_result() {
    }

    public transactionCommit_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionCommit_result(transactionCommit_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public transactionCommit_result deepCopy() {
      return new transactionCommit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public transactionCommit_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionCommit_result)
        return this.equals((transactionCommit_result)that);
      return false;
    }

    public boolean equals(transactionCommit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionCommit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionCommit_resultStandardSchemeFactory implements SchemeFactory {
      public transactionCommit_resultStandardScheme getScheme() {
        return new transactionCommit_resultStandardScheme();
      }
    }

    private static class transactionCommit_resultStandardScheme extends StandardScheme<transactionCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map70.size);
                  for (int _i71 = 0; _i71 < _map70.size; ++_i71)
                  {
                    String _key72;
                    String _val73;
                    _key72 = iprot.readString();
                    _val73 = iprot.readString();
                    struct.success.put(_key72, _val73);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter74 : struct.success.entrySet())
            {
              oprot.writeString(_iter74.getKey());
              oprot.writeString(_iter74.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionCommit_resultTupleSchemeFactory implements SchemeFactory {
      public transactionCommit_resultTupleScheme getScheme() {
        return new transactionCommit_resultTupleScheme();
      }
    }

    private static class transactionCommit_resultTupleScheme extends TupleScheme<transactionCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter75 : struct.success.entrySet())
            {
              oprot.writeString(_iter75.getKey());
              oprot.writeString(_iter75.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map76.size);
            for (int _i77 = 0; _i77 < _map76.size; ++_i77)
            {
              String _key78;
              String _val79;
              _key78 = iprot.readString();
              _val79 = iprot.readString();
              struct.success.put(_key78, _val79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class transactionRollBack_args implements org.apache.thrift.TBase<transactionRollBack_args, transactionRollBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<transactionRollBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionRollBack_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionRollBack_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionRollBack_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionRollBack_args.class, metaDataMap);
    }

    public transactionRollBack_args() {
    }

    public transactionRollBack_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionRollBack_args(transactionRollBack_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public transactionRollBack_args deepCopy() {
      return new transactionRollBack_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public transactionRollBack_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionRollBack_args)
        return this.equals((transactionRollBack_args)that);
      return false;
    }

    public boolean equals(transactionRollBack_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionRollBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionRollBack_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionRollBack_argsStandardSchemeFactory implements SchemeFactory {
      public transactionRollBack_argsStandardScheme getScheme() {
        return new transactionRollBack_argsStandardScheme();
      }
    }

    private static class transactionRollBack_argsStandardScheme extends StandardScheme<transactionRollBack_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionRollBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map80.size);
                  for (int _i81 = 0; _i81 < _map80.size; ++_i81)
                  {
                    String _key82;
                    String _val83;
                    _key82 = iprot.readString();
                    _val83 = iprot.readString();
                    struct.mappara.put(_key82, _val83);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionRollBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter84 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter84.getKey());
              oprot.writeString(_iter84.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionRollBack_argsTupleSchemeFactory implements SchemeFactory {
      public transactionRollBack_argsTupleScheme getScheme() {
        return new transactionRollBack_argsTupleScheme();
      }
    }

    private static class transactionRollBack_argsTupleScheme extends TupleScheme<transactionRollBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionRollBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter85 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter85.getKey());
              oprot.writeString(_iter85.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionRollBack_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map86 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map86.size);
            for (int _i87 = 0; _i87 < _map86.size; ++_i87)
            {
              String _key88;
              String _val89;
              _key88 = iprot.readString();
              _val89 = iprot.readString();
              struct.mappara.put(_key88, _val89);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class transactionRollBack_result implements org.apache.thrift.TBase<transactionRollBack_result, transactionRollBack_result._Fields>, java.io.Serializable, Cloneable, Comparable<transactionRollBack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionRollBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionRollBack_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionRollBack_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionRollBack_result.class, metaDataMap);
    }

    public transactionRollBack_result() {
    }

    public transactionRollBack_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionRollBack_result(transactionRollBack_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public transactionRollBack_result deepCopy() {
      return new transactionRollBack_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public transactionRollBack_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionRollBack_result)
        return this.equals((transactionRollBack_result)that);
      return false;
    }

    public boolean equals(transactionRollBack_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionRollBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionRollBack_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionRollBack_resultStandardSchemeFactory implements SchemeFactory {
      public transactionRollBack_resultStandardScheme getScheme() {
        return new transactionRollBack_resultStandardScheme();
      }
    }

    private static class transactionRollBack_resultStandardScheme extends StandardScheme<transactionRollBack_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionRollBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map90.size);
                  for (int _i91 = 0; _i91 < _map90.size; ++_i91)
                  {
                    String _key92;
                    String _val93;
                    _key92 = iprot.readString();
                    _val93 = iprot.readString();
                    struct.success.put(_key92, _val93);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionRollBack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter94 : struct.success.entrySet())
            {
              oprot.writeString(_iter94.getKey());
              oprot.writeString(_iter94.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionRollBack_resultTupleSchemeFactory implements SchemeFactory {
      public transactionRollBack_resultTupleScheme getScheme() {
        return new transactionRollBack_resultTupleScheme();
      }
    }

    private static class transactionRollBack_resultTupleScheme extends TupleScheme<transactionRollBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionRollBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter95 : struct.success.entrySet())
            {
              oprot.writeString(_iter95.getKey());
              oprot.writeString(_iter95.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionRollBack_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map96.size);
            for (int _i97 = 0; _i97 < _map96.size; ++_i97)
            {
              String _key98;
              String _val99;
              _key98 = iprot.readString();
              _val99 = iprot.readString();
              struct.success.put(_key98, _val99);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class transactionEnd_args implements org.apache.thrift.TBase<transactionEnd_args, transactionEnd_args._Fields>, java.io.Serializable, Cloneable, Comparable<transactionEnd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionEnd_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionEnd_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionEnd_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionEnd_args.class, metaDataMap);
    }

    public transactionEnd_args() {
    }

    public transactionEnd_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionEnd_args(transactionEnd_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public transactionEnd_args deepCopy() {
      return new transactionEnd_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public transactionEnd_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionEnd_args)
        return this.equals((transactionEnd_args)that);
      return false;
    }

    public boolean equals(transactionEnd_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionEnd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionEnd_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionEnd_argsStandardSchemeFactory implements SchemeFactory {
      public transactionEnd_argsStandardScheme getScheme() {
        return new transactionEnd_argsStandardScheme();
      }
    }

    private static class transactionEnd_argsStandardScheme extends StandardScheme<transactionEnd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionEnd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map100.size);
                  for (int _i101 = 0; _i101 < _map100.size; ++_i101)
                  {
                    String _key102;
                    String _val103;
                    _key102 = iprot.readString();
                    _val103 = iprot.readString();
                    struct.mappara.put(_key102, _val103);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionEnd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter104 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter104.getKey());
              oprot.writeString(_iter104.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionEnd_argsTupleSchemeFactory implements SchemeFactory {
      public transactionEnd_argsTupleScheme getScheme() {
        return new transactionEnd_argsTupleScheme();
      }
    }

    private static class transactionEnd_argsTupleScheme extends TupleScheme<transactionEnd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionEnd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter105 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter105.getKey());
              oprot.writeString(_iter105.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionEnd_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map106 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map106.size);
            for (int _i107 = 0; _i107 < _map106.size; ++_i107)
            {
              String _key108;
              String _val109;
              _key108 = iprot.readString();
              _val109 = iprot.readString();
              struct.mappara.put(_key108, _val109);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class transactionEnd_result implements org.apache.thrift.TBase<transactionEnd_result, transactionEnd_result._Fields>, java.io.Serializable, Cloneable, Comparable<transactionEnd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transactionEnd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new transactionEnd_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new transactionEnd_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transactionEnd_result.class, metaDataMap);
    }

    public transactionEnd_result() {
    }

    public transactionEnd_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public transactionEnd_result(transactionEnd_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public transactionEnd_result deepCopy() {
      return new transactionEnd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public transactionEnd_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof transactionEnd_result)
        return this.equals((transactionEnd_result)that);
      return false;
    }

    public boolean equals(transactionEnd_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(transactionEnd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("transactionEnd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class transactionEnd_resultStandardSchemeFactory implements SchemeFactory {
      public transactionEnd_resultStandardScheme getScheme() {
        return new transactionEnd_resultStandardScheme();
      }
    }

    private static class transactionEnd_resultStandardScheme extends StandardScheme<transactionEnd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, transactionEnd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map110 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map110.size);
                  for (int _i111 = 0; _i111 < _map110.size; ++_i111)
                  {
                    String _key112;
                    String _val113;
                    _key112 = iprot.readString();
                    _val113 = iprot.readString();
                    struct.success.put(_key112, _val113);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, transactionEnd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter114 : struct.success.entrySet())
            {
              oprot.writeString(_iter114.getKey());
              oprot.writeString(_iter114.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class transactionEnd_resultTupleSchemeFactory implements SchemeFactory {
      public transactionEnd_resultTupleScheme getScheme() {
        return new transactionEnd_resultTupleScheme();
      }
    }

    private static class transactionEnd_resultTupleScheme extends TupleScheme<transactionEnd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, transactionEnd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter115 : struct.success.entrySet())
            {
              oprot.writeString(_iter115.getKey());
              oprot.writeString(_iter115.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, transactionEnd_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map116 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map116.size);
            for (int _i117 = 0; _i117 < _map116.size; ++_i117)
            {
              String _key118;
              String _val119;
              _key118 = iprot.readString();
              _val119 = iprot.readString();
              struct.success.put(_key118, _val119);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dataSearchByTxt_args implements org.apache.thrift.TBase<dataSearchByTxt_args, dataSearchByTxt_args._Fields>, java.io.Serializable, Cloneable, Comparable<dataSearchByTxt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataSearchByTxt_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataSearchByTxt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataSearchByTxt_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataSearchByTxt_args.class, metaDataMap);
    }

    public dataSearchByTxt_args() {
    }

    public dataSearchByTxt_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataSearchByTxt_args(dataSearchByTxt_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public dataSearchByTxt_args deepCopy() {
      return new dataSearchByTxt_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public dataSearchByTxt_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataSearchByTxt_args)
        return this.equals((dataSearchByTxt_args)that);
      return false;
    }

    public boolean equals(dataSearchByTxt_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataSearchByTxt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataSearchByTxt_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataSearchByTxt_argsStandardSchemeFactory implements SchemeFactory {
      public dataSearchByTxt_argsStandardScheme getScheme() {
        return new dataSearchByTxt_argsStandardScheme();
      }
    }

    private static class dataSearchByTxt_argsStandardScheme extends StandardScheme<dataSearchByTxt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataSearchByTxt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map120.size);
                  for (int _i121 = 0; _i121 < _map120.size; ++_i121)
                  {
                    String _key122;
                    String _val123;
                    _key122 = iprot.readString();
                    _val123 = iprot.readString();
                    struct.mappara.put(_key122, _val123);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataSearchByTxt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter124 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter124.getKey());
              oprot.writeString(_iter124.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataSearchByTxt_argsTupleSchemeFactory implements SchemeFactory {
      public dataSearchByTxt_argsTupleScheme getScheme() {
        return new dataSearchByTxt_argsTupleScheme();
      }
    }

    private static class dataSearchByTxt_argsTupleScheme extends TupleScheme<dataSearchByTxt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataSearchByTxt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter125 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter125.getKey());
              oprot.writeString(_iter125.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataSearchByTxt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map126.size);
            for (int _i127 = 0; _i127 < _map126.size; ++_i127)
            {
              String _key128;
              String _val129;
              _key128 = iprot.readString();
              _val129 = iprot.readString();
              struct.mappara.put(_key128, _val129);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class dataSearchByTxt_result implements org.apache.thrift.TBase<dataSearchByTxt_result, dataSearchByTxt_result._Fields>, java.io.Serializable, Cloneable, Comparable<dataSearchByTxt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataSearchByTxt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataSearchByTxt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataSearchByTxt_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataSearchByTxt_result.class, metaDataMap);
    }

    public dataSearchByTxt_result() {
    }

    public dataSearchByTxt_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataSearchByTxt_result(dataSearchByTxt_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public dataSearchByTxt_result deepCopy() {
      return new dataSearchByTxt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public dataSearchByTxt_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataSearchByTxt_result)
        return this.equals((dataSearchByTxt_result)that);
      return false;
    }

    public boolean equals(dataSearchByTxt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataSearchByTxt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataSearchByTxt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataSearchByTxt_resultStandardSchemeFactory implements SchemeFactory {
      public dataSearchByTxt_resultStandardScheme getScheme() {
        return new dataSearchByTxt_resultStandardScheme();
      }
    }

    private static class dataSearchByTxt_resultStandardScheme extends StandardScheme<dataSearchByTxt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataSearchByTxt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map130 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map130.size);
                  for (int _i131 = 0; _i131 < _map130.size; ++_i131)
                  {
                    String _key132;
                    String _val133;
                    _key132 = iprot.readString();
                    _val133 = iprot.readString();
                    struct.success.put(_key132, _val133);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataSearchByTxt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter134 : struct.success.entrySet())
            {
              oprot.writeString(_iter134.getKey());
              oprot.writeString(_iter134.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataSearchByTxt_resultTupleSchemeFactory implements SchemeFactory {
      public dataSearchByTxt_resultTupleScheme getScheme() {
        return new dataSearchByTxt_resultTupleScheme();
      }
    }

    private static class dataSearchByTxt_resultTupleScheme extends TupleScheme<dataSearchByTxt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataSearchByTxt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter135 : struct.success.entrySet())
            {
              oprot.writeString(_iter135.getKey());
              oprot.writeString(_iter135.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataSearchByTxt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map136 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map136.size);
            for (int _i137 = 0; _i137 < _map136.size; ++_i137)
            {
              String _key138;
              String _val139;
              _key138 = iprot.readString();
              _val139 = iprot.readString();
              struct.success.put(_key138, _val139);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dataSearchByMemory_args implements org.apache.thrift.TBase<dataSearchByMemory_args, dataSearchByMemory_args._Fields>, java.io.Serializable, Cloneable, Comparable<dataSearchByMemory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataSearchByMemory_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataSearchByMemory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataSearchByMemory_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataSearchByMemory_args.class, metaDataMap);
    }

    public dataSearchByMemory_args() {
    }

    public dataSearchByMemory_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataSearchByMemory_args(dataSearchByMemory_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public dataSearchByMemory_args deepCopy() {
      return new dataSearchByMemory_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public dataSearchByMemory_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataSearchByMemory_args)
        return this.equals((dataSearchByMemory_args)that);
      return false;
    }

    public boolean equals(dataSearchByMemory_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataSearchByMemory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataSearchByMemory_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataSearchByMemory_argsStandardSchemeFactory implements SchemeFactory {
      public dataSearchByMemory_argsStandardScheme getScheme() {
        return new dataSearchByMemory_argsStandardScheme();
      }
    }

    private static class dataSearchByMemory_argsStandardScheme extends StandardScheme<dataSearchByMemory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataSearchByMemory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map140 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map140.size);
                  for (int _i141 = 0; _i141 < _map140.size; ++_i141)
                  {
                    String _key142;
                    String _val143;
                    _key142 = iprot.readString();
                    _val143 = iprot.readString();
                    struct.mappara.put(_key142, _val143);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataSearchByMemory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter144 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter144.getKey());
              oprot.writeString(_iter144.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataSearchByMemory_argsTupleSchemeFactory implements SchemeFactory {
      public dataSearchByMemory_argsTupleScheme getScheme() {
        return new dataSearchByMemory_argsTupleScheme();
      }
    }

    private static class dataSearchByMemory_argsTupleScheme extends TupleScheme<dataSearchByMemory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataSearchByMemory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter145 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter145.getKey());
              oprot.writeString(_iter145.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataSearchByMemory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map146 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map146.size);
            for (int _i147 = 0; _i147 < _map146.size; ++_i147)
            {
              String _key148;
              String _val149;
              _key148 = iprot.readString();
              _val149 = iprot.readString();
              struct.mappara.put(_key148, _val149);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class dataSearchByMemory_result implements org.apache.thrift.TBase<dataSearchByMemory_result, dataSearchByMemory_result._Fields>, java.io.Serializable, Cloneable, Comparable<dataSearchByMemory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataSearchByMemory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataSearchByMemory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataSearchByMemory_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataSearchByMemory_result.class, metaDataMap);
    }

    public dataSearchByMemory_result() {
    }

    public dataSearchByMemory_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataSearchByMemory_result(dataSearchByMemory_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public dataSearchByMemory_result deepCopy() {
      return new dataSearchByMemory_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public dataSearchByMemory_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataSearchByMemory_result)
        return this.equals((dataSearchByMemory_result)that);
      return false;
    }

    public boolean equals(dataSearchByMemory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataSearchByMemory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataSearchByMemory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataSearchByMemory_resultStandardSchemeFactory implements SchemeFactory {
      public dataSearchByMemory_resultStandardScheme getScheme() {
        return new dataSearchByMemory_resultStandardScheme();
      }
    }

    private static class dataSearchByMemory_resultStandardScheme extends StandardScheme<dataSearchByMemory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataSearchByMemory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map150 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map150.size);
                  for (int _i151 = 0; _i151 < _map150.size; ++_i151)
                  {
                    String _key152;
                    String _val153;
                    _key152 = iprot.readString();
                    _val153 = iprot.readString();
                    struct.success.put(_key152, _val153);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataSearchByMemory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter154 : struct.success.entrySet())
            {
              oprot.writeString(_iter154.getKey());
              oprot.writeString(_iter154.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataSearchByMemory_resultTupleSchemeFactory implements SchemeFactory {
      public dataSearchByMemory_resultTupleScheme getScheme() {
        return new dataSearchByMemory_resultTupleScheme();
      }
    }

    private static class dataSearchByMemory_resultTupleScheme extends TupleScheme<dataSearchByMemory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataSearchByMemory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter155 : struct.success.entrySet())
            {
              oprot.writeString(_iter155.getKey());
              oprot.writeString(_iter155.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataSearchByMemory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map156 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map156.size);
            for (int _i157 = 0; _i157 < _map156.size; ++_i157)
            {
              String _key158;
              String _val159;
              _key158 = iprot.readString();
              _val159 = iprot.readString();
              struct.success.put(_key158, _val159);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lobSearch_args implements org.apache.thrift.TBase<lobSearch_args, lobSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<lobSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lobSearch_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lobSearch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lobSearch_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lobSearch_args.class, metaDataMap);
    }

    public lobSearch_args() {
    }

    public lobSearch_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lobSearch_args(lobSearch_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public lobSearch_args deepCopy() {
      return new lobSearch_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public lobSearch_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lobSearch_args)
        return this.equals((lobSearch_args)that);
      return false;
    }

    public boolean equals(lobSearch_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lobSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lobSearch_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lobSearch_argsStandardSchemeFactory implements SchemeFactory {
      public lobSearch_argsStandardScheme getScheme() {
        return new lobSearch_argsStandardScheme();
      }
    }

    private static class lobSearch_argsStandardScheme extends StandardScheme<lobSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lobSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map160.size);
                  for (int _i161 = 0; _i161 < _map160.size; ++_i161)
                  {
                    String _key162;
                    String _val163;
                    _key162 = iprot.readString();
                    _val163 = iprot.readString();
                    struct.mappara.put(_key162, _val163);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lobSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter164 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter164.getKey());
              oprot.writeString(_iter164.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lobSearch_argsTupleSchemeFactory implements SchemeFactory {
      public lobSearch_argsTupleScheme getScheme() {
        return new lobSearch_argsTupleScheme();
      }
    }

    private static class lobSearch_argsTupleScheme extends TupleScheme<lobSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lobSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter165 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter165.getKey());
              oprot.writeString(_iter165.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lobSearch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map166 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map166.size);
            for (int _i167 = 0; _i167 < _map166.size; ++_i167)
            {
              String _key168;
              String _val169;
              _key168 = iprot.readString();
              _val169 = iprot.readString();
              struct.mappara.put(_key168, _val169);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class lobSearch_result implements org.apache.thrift.TBase<lobSearch_result, lobSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<lobSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lobSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lobSearch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lobSearch_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lobSearch_result.class, metaDataMap);
    }

    public lobSearch_result() {
    }

    public lobSearch_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lobSearch_result(lobSearch_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
;
      }
    }

    public lobSearch_result deepCopy() {
      return new lobSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public lobSearch_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public lobSearch_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lobSearch_result)
        return this.equals((lobSearch_result)that);
      return false;
    }

    public boolean equals(lobSearch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lobSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lobSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lobSearch_resultStandardSchemeFactory implements SchemeFactory {
      public lobSearch_resultStandardScheme getScheme() {
        return new lobSearch_resultStandardScheme();
      }
    }

    private static class lobSearch_resultStandardScheme extends StandardScheme<lobSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lobSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lobSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lobSearch_resultTupleSchemeFactory implements SchemeFactory {
      public lobSearch_resultTupleScheme getScheme() {
        return new lobSearch_resultTupleScheme();
      }
    }

    private static class lobSearch_resultTupleScheme extends TupleScheme<lobSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lobSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lobSearch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lobInsert_args implements org.apache.thrift.TBase<lobInsert_args, lobInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<lobInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lobInsert_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("bytes", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lobInsert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lobInsert_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required
    public ByteBuffer bytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara"),
      BYTES((short)2, "bytes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          case 2: // BYTES
            return BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BYTES, new org.apache.thrift.meta_data.FieldMetaData("bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lobInsert_args.class, metaDataMap);
    }

    public lobInsert_args() {
    }

    public lobInsert_args(
      Map<String,String> mappara,
      ByteBuffer bytes)
    {
      this();
      this.mappara = mappara;
      this.bytes = bytes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lobInsert_args(lobInsert_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
      if (other.isSetBytes()) {
        this.bytes = org.apache.thrift.TBaseHelper.copyBinary(other.bytes);
;
      }
    }

    public lobInsert_args deepCopy() {
      return new lobInsert_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
      this.bytes = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public lobInsert_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public byte[] getBytes() {
      setBytes(org.apache.thrift.TBaseHelper.rightSize(bytes));
      return bytes == null ? null : bytes.array();
    }

    public ByteBuffer bufferForBytes() {
      return bytes;
    }

    public lobInsert_args setBytes(byte[] bytes) {
      setBytes(bytes == null ? (ByteBuffer)null : ByteBuffer.wrap(bytes));
      return this;
    }

    public lobInsert_args setBytes(ByteBuffer bytes) {
      this.bytes = bytes;
      return this;
    }

    public void unsetBytes() {
      this.bytes = null;
    }

    /** Returns true if field bytes is set (has been assigned a value) and false otherwise */
    public boolean isSetBytes() {
      return this.bytes != null;
    }

    public void setBytesIsSet(boolean value) {
      if (!value) {
        this.bytes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      case BYTES:
        if (value == null) {
          unsetBytes();
        } else {
          setBytes((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      case BYTES:
        return getBytes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      case BYTES:
        return isSetBytes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lobInsert_args)
        return this.equals((lobInsert_args)that);
      return false;
    }

    public boolean equals(lobInsert_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      boolean this_present_bytes = true && this.isSetBytes();
      boolean that_present_bytes = true && that.isSetBytes();
      if (this_present_bytes || that_present_bytes) {
        if (!(this_present_bytes && that_present_bytes))
          return false;
        if (!this.bytes.equals(that.bytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lobInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBytes()).compareTo(other.isSetBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bytes, other.bytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lobInsert_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bytes:");
      if (this.bytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.bytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lobInsert_argsStandardSchemeFactory implements SchemeFactory {
      public lobInsert_argsStandardScheme getScheme() {
        return new lobInsert_argsStandardScheme();
      }
    }

    private static class lobInsert_argsStandardScheme extends StandardScheme<lobInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lobInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map170 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map170.size);
                  for (int _i171 = 0; _i171 < _map170.size; ++_i171)
                  {
                    String _key172;
                    String _val173;
                    _key172 = iprot.readString();
                    _val173 = iprot.readString();
                    struct.mappara.put(_key172, _val173);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bytes = iprot.readBinary();
                struct.setBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lobInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter174 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter174.getKey());
              oprot.writeString(_iter174.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bytes != null) {
          oprot.writeFieldBegin(BYTES_FIELD_DESC);
          oprot.writeBinary(struct.bytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lobInsert_argsTupleSchemeFactory implements SchemeFactory {
      public lobInsert_argsTupleScheme getScheme() {
        return new lobInsert_argsTupleScheme();
      }
    }

    private static class lobInsert_argsTupleScheme extends TupleScheme<lobInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lobInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        if (struct.isSetBytes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter175 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter175.getKey());
              oprot.writeString(_iter175.getValue());
            }
          }
        }
        if (struct.isSetBytes()) {
          oprot.writeBinary(struct.bytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lobInsert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map176 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map176.size);
            for (int _i177 = 0; _i177 < _map176.size; ++_i177)
            {
              String _key178;
              String _val179;
              _key178 = iprot.readString();
              _val179 = iprot.readString();
              struct.mappara.put(_key178, _val179);
            }
          }
          struct.setMapparaIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bytes = iprot.readBinary();
          struct.setBytesIsSet(true);
        }
      }
    }

  }

  public static class lobInsert_result implements org.apache.thrift.TBase<lobInsert_result, lobInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<lobInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lobInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lobInsert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lobInsert_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lobInsert_result.class, metaDataMap);
    }

    public lobInsert_result() {
    }

    public lobInsert_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lobInsert_result(lobInsert_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public lobInsert_result deepCopy() {
      return new lobInsert_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public lobInsert_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lobInsert_result)
        return this.equals((lobInsert_result)that);
      return false;
    }

    public boolean equals(lobInsert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(lobInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lobInsert_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lobInsert_resultStandardSchemeFactory implements SchemeFactory {
      public lobInsert_resultStandardScheme getScheme() {
        return new lobInsert_resultStandardScheme();
      }
    }

    private static class lobInsert_resultStandardScheme extends StandardScheme<lobInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lobInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map180 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map180.size);
                  for (int _i181 = 0; _i181 < _map180.size; ++_i181)
                  {
                    String _key182;
                    String _val183;
                    _key182 = iprot.readString();
                    _val183 = iprot.readString();
                    struct.success.put(_key182, _val183);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lobInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter184 : struct.success.entrySet())
            {
              oprot.writeString(_iter184.getKey());
              oprot.writeString(_iter184.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lobInsert_resultTupleSchemeFactory implements SchemeFactory {
      public lobInsert_resultTupleScheme getScheme() {
        return new lobInsert_resultTupleScheme();
      }
    }

    private static class lobInsert_resultTupleScheme extends TupleScheme<lobInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lobInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter185 : struct.success.entrySet())
            {
              oprot.writeString(_iter185.getKey());
              oprot.writeString(_iter185.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lobInsert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map186 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map186.size);
            for (int _i187 = 0; _i187 < _map186.size; ++_i187)
            {
              String _key188;
              String _val189;
              _key188 = iprot.readString();
              _val189 = iprot.readString();
              struct.success.put(_key188, _val189);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dataBaseDisconn_args implements org.apache.thrift.TBase<dataBaseDisconn_args, dataBaseDisconn_args._Fields>, java.io.Serializable, Cloneable, Comparable<dataBaseDisconn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataBaseDisconn_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataBaseDisconn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataBaseDisconn_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataBaseDisconn_args.class, metaDataMap);
    }

    public dataBaseDisconn_args() {
    }

    public dataBaseDisconn_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataBaseDisconn_args(dataBaseDisconn_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public dataBaseDisconn_args deepCopy() {
      return new dataBaseDisconn_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public dataBaseDisconn_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataBaseDisconn_args)
        return this.equals((dataBaseDisconn_args)that);
      return false;
    }

    public boolean equals(dataBaseDisconn_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataBaseDisconn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataBaseDisconn_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataBaseDisconn_argsStandardSchemeFactory implements SchemeFactory {
      public dataBaseDisconn_argsStandardScheme getScheme() {
        return new dataBaseDisconn_argsStandardScheme();
      }
    }

    private static class dataBaseDisconn_argsStandardScheme extends StandardScheme<dataBaseDisconn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataBaseDisconn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map190 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map190.size);
                  for (int _i191 = 0; _i191 < _map190.size; ++_i191)
                  {
                    String _key192;
                    String _val193;
                    _key192 = iprot.readString();
                    _val193 = iprot.readString();
                    struct.mappara.put(_key192, _val193);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataBaseDisconn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter194 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter194.getKey());
              oprot.writeString(_iter194.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataBaseDisconn_argsTupleSchemeFactory implements SchemeFactory {
      public dataBaseDisconn_argsTupleScheme getScheme() {
        return new dataBaseDisconn_argsTupleScheme();
      }
    }

    private static class dataBaseDisconn_argsTupleScheme extends TupleScheme<dataBaseDisconn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataBaseDisconn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter195 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter195.getKey());
              oprot.writeString(_iter195.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataBaseDisconn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map196 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map196.size);
            for (int _i197 = 0; _i197 < _map196.size; ++_i197)
            {
              String _key198;
              String _val199;
              _key198 = iprot.readString();
              _val199 = iprot.readString();
              struct.mappara.put(_key198, _val199);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class dataBaseDisconn_result implements org.apache.thrift.TBase<dataBaseDisconn_result, dataBaseDisconn_result._Fields>, java.io.Serializable, Cloneable, Comparable<dataBaseDisconn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dataBaseDisconn_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dataBaseDisconn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dataBaseDisconn_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dataBaseDisconn_result.class, metaDataMap);
    }

    public dataBaseDisconn_result() {
    }

    public dataBaseDisconn_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dataBaseDisconn_result(dataBaseDisconn_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public dataBaseDisconn_result deepCopy() {
      return new dataBaseDisconn_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public dataBaseDisconn_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dataBaseDisconn_result)
        return this.equals((dataBaseDisconn_result)that);
      return false;
    }

    public boolean equals(dataBaseDisconn_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(dataBaseDisconn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dataBaseDisconn_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dataBaseDisconn_resultStandardSchemeFactory implements SchemeFactory {
      public dataBaseDisconn_resultStandardScheme getScheme() {
        return new dataBaseDisconn_resultStandardScheme();
      }
    }

    private static class dataBaseDisconn_resultStandardScheme extends StandardScheme<dataBaseDisconn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dataBaseDisconn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map200 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map200.size);
                  for (int _i201 = 0; _i201 < _map200.size; ++_i201)
                  {
                    String _key202;
                    String _val203;
                    _key202 = iprot.readString();
                    _val203 = iprot.readString();
                    struct.success.put(_key202, _val203);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dataBaseDisconn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter204 : struct.success.entrySet())
            {
              oprot.writeString(_iter204.getKey());
              oprot.writeString(_iter204.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dataBaseDisconn_resultTupleSchemeFactory implements SchemeFactory {
      public dataBaseDisconn_resultTupleScheme getScheme() {
        return new dataBaseDisconn_resultTupleScheme();
      }
    }

    private static class dataBaseDisconn_resultTupleScheme extends TupleScheme<dataBaseDisconn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dataBaseDisconn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter205 : struct.success.entrySet())
            {
              oprot.writeString(_iter205.getKey());
              oprot.writeString(_iter205.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dataBaseDisconn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map206 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map206.size);
            for (int _i207 = 0; _i207 < _map206.size; ++_i207)
            {
              String _key208;
              String _val209;
              _key208 = iprot.readString();
              _val209 = iprot.readString();
              struct.success.put(_key208, _val209);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class errInfo_args implements org.apache.thrift.TBase<errInfo_args, errInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<errInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("errInfo_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new errInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new errInfo_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(errInfo_args.class, metaDataMap);
    }

    public errInfo_args() {
    }

    public errInfo_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public errInfo_args(errInfo_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public errInfo_args deepCopy() {
      return new errInfo_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public errInfo_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof errInfo_args)
        return this.equals((errInfo_args)that);
      return false;
    }

    public boolean equals(errInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(errInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("errInfo_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class errInfo_argsStandardSchemeFactory implements SchemeFactory {
      public errInfo_argsStandardScheme getScheme() {
        return new errInfo_argsStandardScheme();
      }
    }

    private static class errInfo_argsStandardScheme extends StandardScheme<errInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, errInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map210 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map210.size);
                  for (int _i211 = 0; _i211 < _map210.size; ++_i211)
                  {
                    String _key212;
                    String _val213;
                    _key212 = iprot.readString();
                    _val213 = iprot.readString();
                    struct.mappara.put(_key212, _val213);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, errInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter214 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter214.getKey());
              oprot.writeString(_iter214.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class errInfo_argsTupleSchemeFactory implements SchemeFactory {
      public errInfo_argsTupleScheme getScheme() {
        return new errInfo_argsTupleScheme();
      }
    }

    private static class errInfo_argsTupleScheme extends TupleScheme<errInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, errInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter215 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter215.getKey());
              oprot.writeString(_iter215.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, errInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map216 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map216.size);
            for (int _i217 = 0; _i217 < _map216.size; ++_i217)
            {
              String _key218;
              String _val219;
              _key218 = iprot.readString();
              _val219 = iprot.readString();
              struct.mappara.put(_key218, _val219);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class errInfo_result implements org.apache.thrift.TBase<errInfo_result, errInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<errInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("errInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new errInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new errInfo_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(errInfo_result.class, metaDataMap);
    }

    public errInfo_result() {
    }

    public errInfo_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public errInfo_result(errInfo_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public errInfo_result deepCopy() {
      return new errInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public errInfo_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof errInfo_result)
        return this.equals((errInfo_result)that);
      return false;
    }

    public boolean equals(errInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(errInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("errInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class errInfo_resultStandardSchemeFactory implements SchemeFactory {
      public errInfo_resultStandardScheme getScheme() {
        return new errInfo_resultStandardScheme();
      }
    }

    private static class errInfo_resultStandardScheme extends StandardScheme<errInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, errInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map220 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map220.size);
                  for (int _i221 = 0; _i221 < _map220.size; ++_i221)
                  {
                    String _key222;
                    String _val223;
                    _key222 = iprot.readString();
                    _val223 = iprot.readString();
                    struct.success.put(_key222, _val223);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, errInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter224 : struct.success.entrySet())
            {
              oprot.writeString(_iter224.getKey());
              oprot.writeString(_iter224.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class errInfo_resultTupleSchemeFactory implements SchemeFactory {
      public errInfo_resultTupleScheme getScheme() {
        return new errInfo_resultTupleScheme();
      }
    }

    private static class errInfo_resultTupleScheme extends TupleScheme<errInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, errInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter225 : struct.success.entrySet())
            {
              oprot.writeString(_iter225.getKey());
              oprot.writeString(_iter225.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, errInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map226 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map226.size);
            for (int _i227 = 0; _i227 < _map226.size; ++_i227)
            {
              String _key228;
              String _val229;
              _key228 = iprot.readString();
              _val229 = iprot.readString();
              struct.success.put(_key228, _val229);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class subscriptionRequest_args implements org.apache.thrift.TBase<subscriptionRequest_args, subscriptionRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<subscriptionRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscriptionRequest_args");

    private static final org.apache.thrift.protocol.TField MAPPARA_FIELD_DESC = new org.apache.thrift.protocol.TField("mappara", org.apache.thrift.protocol.TType.MAP, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscriptionRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscriptionRequest_argsTupleSchemeFactory());
    }

    public Map<String,String> mappara; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAPPARA((short)1, "mappara");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAPPARA
            return MAPPARA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAPPARA, new org.apache.thrift.meta_data.FieldMetaData("mappara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscriptionRequest_args.class, metaDataMap);
    }

    public subscriptionRequest_args() {
    }

    public subscriptionRequest_args(
      Map<String,String> mappara)
    {
      this();
      this.mappara = mappara;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscriptionRequest_args(subscriptionRequest_args other) {
      if (other.isSetMappara()) {
        Map<String,String> __this__mappara = new HashMap<String,String>(other.mappara);
        this.mappara = __this__mappara;
      }
    }

    public subscriptionRequest_args deepCopy() {
      return new subscriptionRequest_args(this);
    }

    @Override
    public void clear() {
      this.mappara = null;
    }

    public int getMapparaSize() {
      return (this.mappara == null) ? 0 : this.mappara.size();
    }

    public void putToMappara(String key, String val) {
      if (this.mappara == null) {
        this.mappara = new HashMap<String,String>();
      }
      this.mappara.put(key, val);
    }

    public Map<String,String> getMappara() {
      return this.mappara;
    }

    public subscriptionRequest_args setMappara(Map<String,String> mappara) {
      this.mappara = mappara;
      return this;
    }

    public void unsetMappara() {
      this.mappara = null;
    }

    /** Returns true if field mappara is set (has been assigned a value) and false otherwise */
    public boolean isSetMappara() {
      return this.mappara != null;
    }

    public void setMapparaIsSet(boolean value) {
      if (!value) {
        this.mappara = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAPPARA:
        if (value == null) {
          unsetMappara();
        } else {
          setMappara((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAPPARA:
        return getMappara();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAPPARA:
        return isSetMappara();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscriptionRequest_args)
        return this.equals((subscriptionRequest_args)that);
      return false;
    }

    public boolean equals(subscriptionRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_mappara = true && this.isSetMappara();
      boolean that_present_mappara = true && that.isSetMappara();
      if (this_present_mappara || that_present_mappara) {
        if (!(this_present_mappara && that_present_mappara))
          return false;
        if (!this.mappara.equals(that.mappara))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(subscriptionRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMappara()).compareTo(other.isSetMappara());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMappara()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mappara, other.mappara);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscriptionRequest_args(");
      boolean first = true;

      sb.append("mappara:");
      if (this.mappara == null) {
        sb.append("null");
      } else {
        sb.append(this.mappara);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscriptionRequest_argsStandardSchemeFactory implements SchemeFactory {
      public subscriptionRequest_argsStandardScheme getScheme() {
        return new subscriptionRequest_argsStandardScheme();
      }
    }

    private static class subscriptionRequest_argsStandardScheme extends StandardScheme<subscriptionRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscriptionRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAPPARA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map230 = iprot.readMapBegin();
                  struct.mappara = new HashMap<String,String>(2*_map230.size);
                  for (int _i231 = 0; _i231 < _map230.size; ++_i231)
                  {
                    String _key232;
                    String _val233;
                    _key232 = iprot.readString();
                    _val233 = iprot.readString();
                    struct.mappara.put(_key232, _val233);
                  }
                  iprot.readMapEnd();
                }
                struct.setMapparaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscriptionRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mappara != null) {
          oprot.writeFieldBegin(MAPPARA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mappara.size()));
            for (Map.Entry<String, String> _iter234 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter234.getKey());
              oprot.writeString(_iter234.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscriptionRequest_argsTupleSchemeFactory implements SchemeFactory {
      public subscriptionRequest_argsTupleScheme getScheme() {
        return new subscriptionRequest_argsTupleScheme();
      }
    }

    private static class subscriptionRequest_argsTupleScheme extends TupleScheme<subscriptionRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscriptionRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMappara()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMappara()) {
          {
            oprot.writeI32(struct.mappara.size());
            for (Map.Entry<String, String> _iter235 : struct.mappara.entrySet())
            {
              oprot.writeString(_iter235.getKey());
              oprot.writeString(_iter235.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscriptionRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map236 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mappara = new HashMap<String,String>(2*_map236.size);
            for (int _i237 = 0; _i237 < _map236.size; ++_i237)
            {
              String _key238;
              String _val239;
              _key238 = iprot.readString();
              _val239 = iprot.readString();
              struct.mappara.put(_key238, _val239);
            }
          }
          struct.setMapparaIsSet(true);
        }
      }
    }

  }

  public static class subscriptionRequest_result implements org.apache.thrift.TBase<subscriptionRequest_result, subscriptionRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<subscriptionRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("subscriptionRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new subscriptionRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new subscriptionRequest_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(subscriptionRequest_result.class, metaDataMap);
    }

    public subscriptionRequest_result() {
    }

    public subscriptionRequest_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public subscriptionRequest_result(subscriptionRequest_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public subscriptionRequest_result deepCopy() {
      return new subscriptionRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public subscriptionRequest_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof subscriptionRequest_result)
        return this.equals((subscriptionRequest_result)that);
      return false;
    }

    public boolean equals(subscriptionRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(subscriptionRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("subscriptionRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class subscriptionRequest_resultStandardSchemeFactory implements SchemeFactory {
      public subscriptionRequest_resultStandardScheme getScheme() {
        return new subscriptionRequest_resultStandardScheme();
      }
    }

    private static class subscriptionRequest_resultStandardScheme extends StandardScheme<subscriptionRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, subscriptionRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map240 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map240.size);
                  for (int _i241 = 0; _i241 < _map240.size; ++_i241)
                  {
                    String _key242;
                    String _val243;
                    _key242 = iprot.readString();
                    _val243 = iprot.readString();
                    struct.success.put(_key242, _val243);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, subscriptionRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter244 : struct.success.entrySet())
            {
              oprot.writeString(_iter244.getKey());
              oprot.writeString(_iter244.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class subscriptionRequest_resultTupleSchemeFactory implements SchemeFactory {
      public subscriptionRequest_resultTupleScheme getScheme() {
        return new subscriptionRequest_resultTupleScheme();
      }
    }

    private static class subscriptionRequest_resultTupleScheme extends TupleScheme<subscriptionRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, subscriptionRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter245 : struct.success.entrySet())
            {
              oprot.writeString(_iter245.getKey());
              oprot.writeString(_iter245.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, subscriptionRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map246 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map246.size);
            for (int _i247 = 0; _i247 < _map246.size; ++_i247)
            {
              String _key248;
              String _val249;
              _key248 = iprot.readString();
              _val249 = iprot.readString();
              struct.success.put(_key248, _val249);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
